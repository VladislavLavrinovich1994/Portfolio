{"version":3,"sources":["Header.module.css","Main.module.css","Skills.module.css","Projects.module.css","Slogan.module.css","Contacts.module.css","Footer.module.css","Header.jsx","Main.jsx","Skills.jsx","Projects.jsx","Slogan.jsx","Contacts.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","header","Main","main","Skills","skills","Projects","projects","Slogan","slogan","Contacts","contacts","Footer","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,OAAS,yB,uJCUZC,MARf,WACE,OACE,yBAAKC,UAAWC,IAAOC,U,gBCMZC,MARf,WACE,OACE,yBAAKH,UAAWC,IAAOG,Q,gBCMZC,MARf,WACE,OACE,yBAAKL,UAAWC,IAAOK,U,gBCMZC,MARf,WACE,OACE,yBAAKP,UAAWC,IAAOO,Y,gBCMZC,MARf,WACE,OACE,yBAAKT,UAAWC,IAAOS,U,gBCKZC,MAPf,WACE,OACE,yBAAKX,UAAWC,IAAOW,Y,gBCMZC,MARf,WACE,OACE,yBAAKb,UAAWC,IAAOa,UCsBZC,MAjBf,WACE,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.18138cb0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2bVSr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__20cJU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skills\":\"Skills_skills__2yT7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projects\":\"Projects_projects__9N2Ep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slogan\":\"Slogan_slogan__2X7mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Contacts_contacts__2f7Wn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2cSGW\"};","import React from 'react';\nimport styles from './Header.module.css';\n\nfunction Header() {\n  return (\n    <div className={styles.header}>\n    \n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styles from './Main.module.css';\n\nfunction Main() {\n  return (\n    <div className={styles.main}>\n    \n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport styles from './Skills.module.css';\n\nfunction Skills() {\n  return (\n    <div className={styles.skills}>\n    \n    </div>\n  );\n}\n\nexport default Skills;\n","import React from 'react';\nimport styles from './Projects.module.css';\n\nfunction Projects() {\n  return (\n    <div className={styles.projects}>\n    \n    </div>\n  );\n}\n\nexport default Projects;\n","import React from 'react';\nimport styles from './Slogan.module.css';\n\nfunction Slogan() {\n  return (\n    <div className={styles.slogan}>\n    \n    </div>\n  );\n}\n\nexport default Slogan;\n","import React from 'react';\nimport styles from './Contacts.module.css';\n\nfunction Contacts() {\n  return (\n    <div className={styles.contacts}>\n    \n    </div>\n  );\n}\nexport default Contacts;\n","import React from 'react';\nimport styles from './Footer.module.css';\n\nfunction Footer() {\n  return (\n    <div className={styles.footer}>\n    \n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Skills from './Skills';\nimport Projects from './Projects';\nimport Slogan from './Slogan';\nimport Contacts from './Contacts';\nimport Footer from './Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"portfolio\">\n      <Header/>\n      <Main/>\n      <Skills/>\n      <Projects/>\n      <Slogan/>\n      <Contacts/>\n      <Footer/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}